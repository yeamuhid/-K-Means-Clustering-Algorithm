import numpy as np

def kmeans(X, k, max_iters=100):
    # Step 1: Initialize centroids randomly from the dataset
    np.random.seed(42)
    centroids = X[np.random.choice(range(len(X)), k, replace=False)]
    
    for _ in range(max_iters):
        # Step 2: Assign each data point to the nearest centroid
        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
        clusters = np.argmin(distances, axis=1)
        
        # Step 3: Calculate new centroids
        new_centroids = np.array([X[clusters == j].mean(axis=0) for j in range(k)])
        
        # Check for convergence
        if np.all(centroids == new_centroids):
            break
        
        centroids = new_centroids
    
    return clusters, centroids

# Example usage with random data
X = np.random.rand(100, 2)  # 100 points in 2D
k = 3                        # Number of clusters

clusters, centroids = kmeans(X, k)
print("Cluster assignments:", clusters)
print("Centroids:", centroids)
